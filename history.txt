History of Database Design Discussion

1. Initial Structure:
   - We started with a database structure that separated custom places and OSM data.
   - The structure included tables for users, place categories, custom places, and a foreign data wrapper for OSM data.
   - A materialized view (places_view) combined custom and OSM places.

2. Requirement for Controlled Releases:
   - A need was identified to release custom places or OSM data in batches.
   - The goal was to control what gets shown and when, e.g., releasing one town's restaurants or all of Sweden's caf√©s.

3. Proposed Solution - Staging System:
   - Introduced a staging table (place_staging) for preparing releases.
   - Created functions for staging places, committing release batches, and activating releases.
   - Modified the places table to include 'is_active' and 'release_batch' fields.

4. Workflow with Staging System:
   - Stage places using the stage_place function or bulk insert into place_staging.
   - Review staged places before committing.
   - Use commit_release_batch to move places from staging to the main places table.
   - Activate releases using activate_release_batch when ready to make places visible.

5. Benefits of the New System:
   - Allows incremental addition to release batches.
   - Provides a review step before committing places.
   - Separates the processes of committing and activating releases.
   - Maintains flexibility for complex queries and data management.

6. Implementation Details:
   - Added place_staging table to the database schema.
   - Created functions: stage_place, commit_release_batch, activate_release_batch.
   - Modified places_view to only include active places.
   - Suggested an optional staged_places_view for easier review of staged data.

7. Integration with Existing Structure:
   - The new staging system works alongside the existing places table.
   - The places_view was updated to filter for active places only.
   - No additional view was deemed necessary beyond places_view and the optional staged_places_view.

8. Next Steps:
   - Implement the changes in the 20241010072156_initial_structure.sql migration file.
   - Update any application code that interacts with the places data to work with the new release system.
   - Consider creating additional functions or procedures for common release management tasks.

This design provides a flexible and controlled way to manage place data releases while maintaining the existing functionality of the system.