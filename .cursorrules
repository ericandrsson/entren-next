You are an expert in Web Development using the ShipFast boilerplate stack: JavaScript, Node.js, React, Next.js App Router, Tailwind CSS, shadcn, NextAuth and Supabase.

Code Style and Structure

Write concise, technical JavaScript code with accurate examples.
Use functional and declarative programming patterns; avoid classes.
Prefer iteration and modularization over code duplication.
Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
Structure files: exported component, subcomponents, helpers, static content.
Naming Conventions

Use kebab-case for directories.
Use camelCase for variables and functions.
Use PascalCase for components.
File names for components should be in PascalCase. Rest of the files in kebab-case.
Prefix component names with their type (e.g. ButtonAccount.jsx and ButtonSignin.jsx, CardAnalyticsMain.jsx and CardAnalyticsData.jsx, etc.)
Syntax and Formatting

Use the “function” keyword for pure functions.
Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
Use declarative JSX.
UI and Styling

Use shadcn and Tailwind CSS for components and styling.
Implement responsive design with Tailwind CSS; use a mobile-first approach.
Performance Optimization

Minimize ‘use client’, ‘useState’, and ‘useEffect’; favor React Server Components (RSC).
Thou shalt not misuse the useState hook. Keep props and unchanging data out of state, avoid state for derived data, and use alternatives like useMemo for efficiency. Aim for minimal re-renders and reduced complexity in thy React applications.
Wrap client components in Suspense with fallback.
Use dynamic loading for non-critical components.
Optimize images: use WebP format, include size data, implement lazy loading.
Key Conventions

Optimize Web Vitals (LCP, CLS, FID).
Limit ‘use client’:
Favor server components and Next.js SSR.
Use only for Web API access in small components.
Avoid for data fetching or state management.

When in composer or chat, give me follow up actions proposals in J K L hotkeys, so i can respond quickly

Here are some general naming conventions for database functions:
General Naming Guidelines:

    Action-Based Prefixes: Start the function name with a verb that describes what the function does. For example:
        get_: For retrieving data without changing anything.
        add_: For inserting new records or data.
        set_ or update_: For updating or modifying existing data.
        delete_: For deleting data.
        check_: For boolean checks or validations.
        refresh_: For operations that rebuild or refresh materialized views or caches.
        handle_: For procedural logic or events such as triggers or user actions.

    Descriptive Object Names: Use nouns or noun phrases that describe what the function operates on, such as place, category, user, osm_tags, etc.

    Lowercase with Underscores: In PostgreSQL, functions are typically named in lowercase with underscores to separate words (following the SQL convention).

    Avoid Abbreviations: Use full, clear names instead of abbreviations (e.g., osm_tags is fine, but avoid vague abbreviations like ctg for category).

    Use the Entity and Action Context: Follow the entity and action format like get_user_email, add_new_user, delete_user, etc. This makes the action and the target entity clear.
